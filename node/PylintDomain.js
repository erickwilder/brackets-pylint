/*jslint vars: true, nomen: true, indent: 4*/
/*global require, console, exports, brackets */
(function () {
    "use strict";
    
    var _ = require('thirdparty/lodash'),
        CodeInspection = brackets.getModule('language/CodeInspection'),
        ProjectManager = brackets.getModule('project/ProjectManager'),
        spawn = require('child_process').spawn,
        types = {
            refactor: CodeInspection.Type.META,
            convention: CodeInspection.Type.META,
            error: CodeInspection.Type.ERROR,
            fatal: CodeInspection.Type.ERROR,
            warning: CodeInspection.Type.WARNING
        };
    
    var rcfilePath = ProjectManager.getProjectRoot().fullPath + 'pylintrc';
    
    /*jslint regexp: true*/
    function parseOutput(data) {
        console.log('Pylint data = ' + data);
        var lines = _.filter(data.split(/\n\r?/), function (line) {
            return (/\b\d+:\d+:[a-z]+:.+$/).test(line);
        });
        
        var result = _.map(lines, function (line) {
            var pieces = line.split(':');
            return {
                line: _.parseInt(pieces[0]),
                col: _.parseInt(pieces[1]),
                cat: String(pieces[2]).toLowerCase(),
                msg: pieces[3]
            };
        });
        return result;
    }
    /*jslint regexp: false*/
    
    function runCommand(filePath, callback) {
        var output = '', pylint,
            args = ['--msg-template="{line}"{column}:{category}:{msg}"',
                    '--report=n', '--persistent=n', '--rcfile=' + rcfilePath,
                   filePath];
        try {
            pylint = spawn('/usr/local/bin/pylint', args);
        } catch (err) {
            callback(err);
        }
        
        pylint.stderr.on('data', function (data) {
            output += data.toString();
        });
        
        pylint.stdout.on('data', function (data) {
            output += data.toString();
        });
        
        pylint.on('exit', function (code, signal) {
            callback(null, parseOutput(output));
            output = null;
        });
    }
    
    function _init(domainManager) {
        if (domainManager.hasDomain('bracketsPylint')) {
            domainManager.registerDomain('bracketsPylint', {major: 0, minor: 1});
        }
        domainManager.registerCommand(
            'bracketsPylint',
            'run',
            runCommand,
            true,       // Asyncronous
            "Return linting result generated by a pylint process.",
            [{name: 'filePath', type: 'string', description: 'Full path of python file to be linted.'}],
            [{name: 'lines', type: 'object', description: 'Promise with linting results.'}]
        );
    }
    
    exports.init = _init;
}());
